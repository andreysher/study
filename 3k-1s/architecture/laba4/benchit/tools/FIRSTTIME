#!/bin/sh
#####################################################################
# BenchIT - Performance Measurement for Scientific Applications
# Contact: developer@benchit.org
#
# $Id: FIRSTTIME 5 2009-09-14 11:36:17Z william $
# $URL: svn+ssh://william@rupert.zih.tu-dresden.de/svn-base/benchit-root/BenchITv6/tools/FIRSTTIME $
# For license details see COPYING in the package base directory
#####################################################################
# Script which is run on every Platform when BenchIT is started
# for the first time
# It tries to generate a set of Definitions for the machine
#####################################################################

# Edit a particular file with the user's editor - ask for the editor if not set
editfile() {
	if [ -z "${1}" ]; then
		printf "ERROR: Internal error in FIRSTTIME\n"
		exit 127
	fi
	if [ -z "${BENCHIT_EDITOR}" ]; then
		printf "BenchIT: Which editor would you like to use? "
		read editor
		BENCHIT_EDITOR="${editor}"
	fi 
	[ -n "${BENCHIT_EDITOR}" ] && "${BENCHIT_EDITOR}" "${1}"
}

# Let the user enter some information
# Usage: enter_information <Name of entry> <Name of env variable>
# E.g. enter_information "C-Compiler" CC HAVE_CC
enter_interactive() {
	if [ "${BENCHIT_INTERACTIVE}" != "1" ]; then
		printf "         ${1} NOT found.\n"
	else
		printf "\
BenchIT: Could not automatically locate a ${1}.
         Please enter yours (Leave empty for none): "
		read value
		eval ${2}="${value}"
	fi
}

# Automatic detection routine
autodetection() {
	#* FIRSTTIME/compilersearch
	# SYNOPSIS
	# let's look for the compilers first
	#
	# the c-compiler
	# now the c++ compiler
	# and for the math gurus fortran77
	# for the advanced math people - fortran90
	# and for the strange people - the java compiler
	# not to forget the java virtual machine
	# and the Path to the Java-SDK (JNI needs the include-directory)
	#***
	
	# the c-compiler
	FOUNDONE=""
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have icc && BENCHIT_CC="icc" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have pathcc && BENCHIT_CC="pathcc" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have pgcc && BENCHIT_CC="pgcc" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have ecc && BENCHIT_CC="ecc" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have gcc && BENCHIT_CC="gcc" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have cc && BENCHIT_CC="cc" && FOUNDONE=1 ;}
	# could not find it - have user type it in
	if [ -z "${BENCHIT_CC}" ]; then
		enter_interactive "C compiler" BENCHIT_CC
		if [ -z "${BENCHIT_CC}" ]; then
			exit 127
		fi
	else
		echo "         Found C compiler: ${BENCHIT_CC}"
	fi
	
	# now the c++ compiler
	FOUNDONE=""
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have icpc && BENCHIT_CXX="icpc" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have icc && BENCHIT_CXX="icc" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have pathCC && BENCHIT_CXX="pathCC" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have pgCC && BENCHIT_CXX="pgCC" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have ecc && BENCHIT_CXX="ecc" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have g++ && BENCHIT_CXX="g++" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have c++ && BENCHIT_CXX="c++" && FOUNDONE=1 ;}

	# could not find it - ask user
	if [ -z "${BENCHIT_CXX}" ]; then
		enter_interactive "C++ compiler" BENCHIT_CXX
	else
		echo "         Found C++ compiler: ${BENCHIT_CXX}"
	fi
	
	# and for the math gurus fortran77
	FOUNDONE=""
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have ifort && BENCHIT_F77="ifort" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have pgf77 && BENCHIT_F77="pgf77" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have efc && BENCHIT_F77="efc" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have ifc && BENCHIT_F77="ifc" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have g77 && BENCHIT_F77="g77" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have gfortran && BENCHIT_F77="gfortran" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have f77 && BENCHIT_F77="f77" && FOUNDONE=1 ;}

	# could not find it - ask user
	if [ -z "${BENCHIT_F77}" ]; then
		enter_interactive "Fortran77 compiler" BENCHIT_F77
	else
		echo "         Found Fortran77 compiler: ${BENCHIT_F77}"
	fi
	
	# for the advanced math people - fortran90
	FOUNDONE=""
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have ifort && BENCHIT_F90="ifort" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have pathf90 && BENCHIT_F90="pathf90" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have pgf90 && BENCHIT_F90="pgf90" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have efc && BENCHIT_F90="efc" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have ifc && BENCHIT_F90="ifc" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have gfortran && BENCHIT_F90="gfortran" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have f90 && BENCHIT_F90="f90" && FOUNDONE=1 ;}
	# could not find it - ask user
	if [ -z "${BENCHIT_F90}" ]; then
		enter_interactive "Fortran90 compiler" BENCHIT_F90
	else
		echo "         Found Fortran90 compiler: ${BENCHIT_F90}"
	fi
	
	# for the very advanced math people - fortran95
	FOUNDONE=""
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have ifort && BENCHIT_F95="ifort" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have pathf95 && BENCHIT_F95="pathf95" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have pgf95 && BENCHIT_F95="pgf95" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have efc && BENCHIT_F95="efc" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have ifc && BENCHIT_F95="ifc" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have gfortran && BENCHIT_F95="gfortran" && FOUNDONE=1 ;}
	[ "${FOUNDONE}" ] || { "${BENCHITROOT}/tools/features" have f95 && BENCHIT_F95="f95" && FOUNDONE=1 ;}
	# could not find it - ask user
	if [ -z "${BENCHIT_F95}" ]; then
		enter_interactive "Fortran95 compiler" BENCHIT_F95
	else
		echo "         Found Fortran95 compiler: ${BENCHIT_F95}"
	fi
	
	# and for the strange people - the java compiler
	"${BENCHITROOT}/tools/features" have javac && BENCHIT_JAVAC="javac"
	# could not find it - ask user
	if [ -z "${BENCHIT_JAVAC}" ]; then
		enter_interactive "Java compiler" BENCHIT_JAVAC
	else
		echo "         Found Java compiler: ${BENCHIT_JAVAC}"
	fi

	# not to forget the java virtual machine
	"${BENCHITROOT}/tools/features" have java && BENCHIT_JAVA="java"
	# could not find it - ask user
	if [ -z "${BENCHIT_JAVA}" ]; then
		enter_interactive "Java virtual machine" BENCHIT_JAVA
	else
		echo "         Found Java virtual machine: ${BENCHIT_JAVA}"
	fi

	# and the Path to the Java-SDK (JNI needs the include-directory)
	if [ -n ${JAVA_HOME} ] && [ -d "${JAVA_HOME}/include/" ]
	then 
		BENCHIT_JAVA_HOME=${JAVA_HOME}
	fi
	#could not find it - ask user
	if [ -z "${BENCHIT_JAVA_HOME}" ]; then
		enter_interactive "path to Java-SDK" BENCHIT_JAVA_HOME
	else
		echo "         Found path to Java-SDK: ${BENCHIT_JAVA_HOME}"
	fi

	#* FIRSTTIME/libraries
	# SYNOPSIS
	# now let's check the libraries
	#
	# first MPI
	# now pvm
	# and pthreads
	# maybe pcl
	#***
	
	#
	#
	# now let's check the libraries
	set +e
	
	# first MPI
	BENCHIT_CPP_MPI="`\"${BENCHITROOT}/tools/features\" cpp mpi`"
	BENCHIT_LIB_MPI="`\"${BENCHITROOT}/tools/features\" lib mpi`"
	
	# now pvm
	BENCHIT_CPP_PVM="`\"${BENCHITROOT}/tools/features\" cpp pvm`"
	BENCHIT_LIB_PVM="`\"${BENCHITROOT}/tools/features\" lib pvm`"
	
	# and pthreads
	BENCHIT_CPP_PTHREADS="`\"${BENCHITROOT}/tools/features\" cpp thr`"
	BENCHIT_LIB_PTHREAD="`\"${BENCHITROOT}/tools/features\" lib thr`"
	
	# maybe pcl
	BENCHIT_CPP_PCL="`\"${BENCHITROOT}/tools/features\" cpp pcl`"
	BENCHIT_LIB_PCL="`\"${BENCHITROOT}/tools/features\" lib pcl`"
	
	# a lot todos
	# maybe acml
	#BENCHIT_CPP_ACML="`\"${BENCHITROOT}/tools/features\" cpp acml`"
	#BENCHIT_LIB_ACML="`\"${BENCHITROOT}/tools/features\" lib acml`"

	# maybe atlas
	#BENCHIT_CPP_ATLAS="`\"${BENCHITROOT}/tools/features\" cpp atlas`"
	#BENCHIT_LIB_ATLAS="`\"${BENCHITROOT}/tools/features\" lib atlas`"

	# maybe essl
	#BENCHIT_CPP_ESSL="`\"${BENCHITROOT}/tools/features\" cpp essl`"
	#BENCHIT_LIB_ESSL="`\"${BENCHITROOT}/tools/features\" lib essl`"

	# maybe mkl
	#BENCHIT_CPP_MKL="`\"${BENCHITROOT}/tools/features\" cpp mkl`"
	#BENCHIT_LIB_MKL="`\"${BENCHITROOT}/tools/features\" lib mkl`"

	# maybe scsl
	#BENCHIT_CPP_SCSL="`\"${BENCHITROOT}/tools/features\" cpp scsl`"
	#BENCHIT_LIB_SCSL="`\"${BENCHITROOT}/tools/features\" lib scsl`"

	# maybe fftw3
	#BENCHIT_CPP_FFTW3="`\"${BENCHITROOT}/tools/features\" cpp fftw3`"
	#BENCHIT_LIB_FFTW3="`\"${BENCHITROOT}/tools/features\" lib fftw3`"



	#* FIRSTTIME/compiler_flags
	# SYNOPSIS
	# now we try some compiler flags
	#
	# first the optimization
	# let's try -O2
	# ok - that should be it - now let's write that sucker
	#***
	
	#
	#
	# now we try some compiler flags
	
	#
	# first the optimization
	
	# let's try -O2
	if [ -n "${BENCHIT_CC}" ]; then
		${BENCHIT_CC} -O2 2>ufo >ufo; grep "option" <ufo >/dev/null
		if [ "$?" -eq 0 ]; then
			BENCHIT_CC_C_FLAGS_STD=""
		else
			BENCHIT_CC_C_FLAGS_STD="-O2"
		fi
	fi
	
	if [ -n "$BENCHIT_CXX" ]; then
		$BENCHIT_CXX -O2 2>ufo >ufo; grep "option" <ufo >/dev/null
		if [ "$?" -eq 0 ]; then
			BENCHIT_CXX_C_FLAGS_STD=""
		else
			BENCHIT_CXX_C_FLAGS_STD="-O2"
		fi
	fi
	
	if [ -n "$BENCHIT_F77" ]; then
		$BENCHIT_F77 -O2 2>ufo >ufo; grep "option" <ufo >/dev/null
		if [ "$?" -eq 0 ]; then
			BENCHIT_F77_C_FLAGS_STD=""
		else
			BENCHIT_F77_C_FLAGS_STD="-O2"
		fi
	fi
	
	if [ -n "$BENCHIT_F90" ]; then
		$BENCHIT_F90 -O2 2>ufo >ufo; grep "option" <ufo >/dev/null
		if [ "$?" -eq 0 ]; then
			BENCHIT_F90_C_FLAGS_STD=""
		else
			BENCHIT_F90_C_FLAGS_STD="-O2"
		fi
	fi
	
	if [ -n "$BENCHIT_F95" ]; then
		$BENCHIT_F95 -O2 2>ufo >ufo; grep "option" <ufo >/dev/null
		if [ "$?" -eq 0 ]; then
			BENCHIT_F95_C_FLAGS_STD=""
		else
			BENCHIT_F95_C_FLAGS_STD="-O2"
		fi
	fi
	
	# now for -O3 or -O
	if [ -n "$BENCHIT_CC" ]; then
		$BENCHIT_CC -O3 2>ufo >ufo; grep "option" <ufo >/dev/null
		if [ "$?" -eq 0 ]; then
			$BENCHIT_CC -O 2>ufo >ufo; grep "option" <ufo >/dev/null
			if [ "$?" -eq 0 ]; then
				BENCHIT_CC_C_FLAGS_HIGH=""
			else
				BENCHIT_CC_C_FLAGS_HIGH="-O"
			fi
		else
			BENCHIT_CC_C_FLAGS_HIGH="-O3"
		fi
	fi
	
	if [ -n "$BENCHIT_CXX" ]; then
		$BENCHIT_CXX -O3 2>ufo >ufo; grep "option" <ufo >/dev/null
		if [ "$?" -eq 0 ]; then
			$BENCHIT_CXX -O 2>ufo >ufo; grep "option" <ufo >/dev/null
			if [ "$?" -eq 0 ]; then
				BENCHIT_CXX_C_FLAGS_HIGH=""
			else
				BENCHIT_CXX_C_FLAGS_HIGH="-O"
			fi
		else
			BENCHIT_CXX_C_FLAGS_HIGH="-O3"
		fi
	fi
	
	if [ -n "$BENCHIT_F77" ]; then
		$BENCHIT_F77 -O3 2>ufo >ufo; grep "option" <ufo >/dev/null
		if [ "$?" -eq 0 ]; then
			$BENCHIT_F77 -O 2>ufo >ufo; grep "option" <ufo >/dev/null
			if [ "$?" -eq 0 ]; then
				BENCHIT_F77_C_FLAGS_HIGH=""
			else
				BENCHIT_F77_C_FLAGS_HIGH="-O"
			fi
		else
			BENCHIT_F77_C_FLAGS_HIGH="-O3"
		fi
	fi
	
	if [ -n "$BENCHIT_F90" ]; then
		$BENCHIT_F90 -O3 2>ufo >ufo; grep "option" <ufo >/dev/null
		if [ "$?" -eq 0 ]; then
			$BENCHIT_F90 -O 2>ufo >ufo; grep "option" <ufo >/dev/null
			if [ "$?" -eq 0 ]; then
				BENCHIT_F90_C_FLAGS_HIGH=""
			else
				BENCHIT_F90_C_FLAGS_HIGH="-O"
			fi
		else
			BENCHIT_F90_C_FLAGS_HIGH="-O3"
		fi
	fi
	
	if [ -n "$BENCHIT_F95" ]; then
		$BENCHIT_F95 -O4 2>ufo >ufo; grep "option" <ufo >/dev/null
		if [ "$?" -eq 0 ]; then
			$BENCHIT_F95 -O 2>ufo >ufo; grep "option" <ufo >/dev/null
			if [ "$?" -eq 0 ]; then
				BENCHIT_F95_C_FLAGS_HIGH=""
			else
				BENCHIT_F95_C_FLAGS_HIGH="-O"
			fi
		else
			BENCHIT_F95_C_FLAGS_HIGH="-O4"
		fi
	fi
	
	if [ -n "$BENCHIT_JAVAC" ]; then
		$BENCHIT_JAVAC -O 2>ufo >ufo; grep "flag" <ufo >/dev/null
		if [ "$?" -eq 0 ]; then
			BENCHIT_JAVAC_FLAGS_HIGH=""
		else
			BENCHIT_JAVAC_FLAGS_HIGH="-O"
		fi
	fi
	rm ufo
	
	# compile JNI-Libraries if Java-SDK is available
	if [ -n ${BENCHIT_JAVA_HOME} ]; then
		if [ -d "${BENCHIT_JAVA_HOME}/include/" ] && [ -n ${BENCHIT_CC} ]; then
			export BENCHIT_CC
			sh ${BENCHITROOT}/jbi/jni/compile.sh ${BENCHIT_JAVA_HOME}
		fi
	fi

         if [ "${BENCHIT_NO_HW_DETECT}" != "1" ];then
 	 # hardware detection
 	 if { "${BENCHITROOT}/tools/features" have gcc && "${BENCHITROOT}/tools/features" have "bc -h";} then
            echo "BenchIT: Configuring hardware detection."
 	   cd ${BENCHITROOT}/tools/hw_detect/
 	   sh compile.sh
            cd ${BENCHITROOT}
            echo "BenchIT: Running hardware detection."
            echo "         Note: if that causes problems, it can be disabled by setting environment variable BENCHIT_NO_HW_DETECT=1"
 	   if { "${BENCHITROOT}/tools/features" have ${BENCHITROOT}/tools/hw_detect/cpuinfo;} then
 	     BENCHIT_NUM_CPUS="`${BENCHITROOT}/tools/hw_detect/cpuinfo num_cpus`"
 	     BENCHIT_RUN_MAX_MEMORY="`${BENCHITROOT}/tools/hw_detect/cpuinfo memsize`"
 	     BENCHIT_RUN_MAX_MEMORY="`echo \" ( ${BENCHIT_RUN_MAX_MEMORY} * 0.85 ) / 1048576 \" | bc -s`"
            fi
 	   if { "${BENCHITROOT}/tools/features" have ${BENCHITROOT}/tools/hw_detect/cpuinfo;} then
              BENCHIT_ARCH_SHORT="`${BENCHITROOT}/tools/hw_detect/cpuinfo cpu_name`"
              BENCHIT_NUM_CORES_PER_PACKAGE="`${BENCHITROOT}/tools/hw_detect/cpuinfo num_cores_per_package`"
              # first measure frequency with TSCs (allowing only constant, i.e. powermanagement invariant, TSCs)
  	      BENCHIT_ARCH_SPEED="`${BENCHITROOT}/tools/hw_detect/cpuinfo cpu_clockrate`"
              if [ "${BENCHIT_ARCH_SPEED}" = "n/a" ]; then
                # if frequency information is not found in /sysfs, the there is a good chance that power management is inactive
                # in this case TSCs are tried again, allowing the use of non-constant, i.e. powermanagement sensitive, TSCs
                # if power management is activ, but files in /sysfs do not exist or are not readable, this eventually produces wrong values !!!
 	       BENCHIT_ARCH_SPEED="`${BENCHITROOT}/tools/hw_detect/cpuinfo cpu_clockrate_no_check`"
              fi
 	     if [ "${BENCHIT_ARCH_SPEED}" = "n/a" ]; then
 	       BENCHIT_ARCH_SPEED="unknown"
              else
 	       BENCHIT_ARCH_SPEED="`echo \" ${BENCHIT_ARCH_SPEED} / 1000000 \" | bc -s`"
              fi
              BENCHIT_ARCH_SHORT="`${BENCHITROOT}/tools/hw_detect/cpuinfo arch_short`"
            fi
          fi
         fi

	[ -z "${BENCHIT_NUM_CPUS}" ] && BENCHIT_NUM_CPUS="1"
	[ -z "${BENCHIT_RUN_MAX_MEMORY}" ] && BENCHIT_RUN_MAX_MEMORY="0"
	[ -z "${BENCHIT_ARCH_SHORT}" ] && BENCHIT_ARCH_SHORT="unknown"
	[ -z "${BENCHIT_ARCH_SPEED}" ] && BENCHIT_ARCH_SPEED="unknown"
	BENCHIT_RUN_TIMELIMIT="3600"
	BENCHIT_ENVIRONMENT="DEFAULT"

	echo "BenchIT: Automatic system detection complete."

	#* FIRSTTIME/user_infos
	# now we need some information from the user
	#
	# the number of cpu's to use
	# the amount of memor to use
	# architecture id
	# architecture speed
	# total timelimit
	# environment
	#***

	if [ "${BENCHIT_INTERACTIVE}" = "1" ]; then
	  printf "\nBenchIT: Please answer the following questions to help using your machine.\n"
	  # number of cpus to use
	  printf "BenchIT: How many CPUs shall be used for the measurements? [default=${BENCHIT_NUM_CPUS}]\n"
	  read BENCHIT_TMP
	  [ -n "${BENCHIT_TMP}" ] && BENCHIT_NUM_CPUS="${BENCHIT_TMP}"

	  # maximum amount of memory to use
	  printf "BenchIT: How many MEGABYTES of memory may the kernels at most use for the\n"
	  printf "         measurements? [default=${BENCHIT_RUN_MAX_MEMORY}] (85%% of available RAM)\n"
	  read BENCHIT_TMP
	  [ -n "${BENCHIT_TMP}" ] && BENCHIT_RUN_MAX_MEMORY="${BENCHIT_TMP}"

	  # architecture id
	  printf "BenchIT: Please specify your architecture in 4 digits. (e.g. InP4, AmK7,SX6)\n"
	  printf "         [default=${BENCHIT_ARCH_SHORT}]\n"
	  read BENCHIT_TMP
	  [ -n "${BENCHIT_TMP}" ] && BENCHIT_ARCH_SHORT="${BENCHIT_TMP}"

	  # architecture speed
	  printf "BenchIT: Please specify the clockrate of your CPU in Megahertz.\n"
	  printf "         [default=${BENCHIT_ARCH_SPEED}]\n"
	  read BENCHIT_TMP
	  [ -n "${BENCHIT_TMP}" ] && BENCHIT_ARCH_SPEED="${BENCHIT_TMP}"

	  # timelimit
	  printf "BenchIT: Please specify the maximum timelimit for one kernel (in seconds). \n"
          printf "         [default=$BENCHIT_RUN_TIMELIMIT]\n"
	  read BENCHIT_TMP
	  [ -n "${BENCHIT_TMP}" ] && BENCHIT_RUN_TIMELIMIT="${BENCHIT_TMP}"

	  # environment
	  printf "BenchIT: Which system environment do you run? Currently available are:\n"
	  printf "         "
	  for a in `ls -1 ${BENCHITROOT}/tools/environments/`; do
		[ -f ${BENCHITROOT}/tools/environments/$a ] && printf "$a "
	  done
	  printf "\n         [default=$BENCHIT_ENVIRONMENT]\n"
	  read BENCHIT_TMP
	  [ -n "${BENCHIT_TMP}" ] && BENCHIT_ENVIRONMENT="${BENCHIT_TMP}"
	  printf "\nBenchIT: Thank you.\n\n"
	fi

	printf "         Writing ${BENCHITROOT}/LOCALDEFS/${BENCHIT_NODENAME}...\n"

	echo "\
#####################################################################
############    BenchIT local config file    ########################
#####################################################################

#######################################
# Section 1 Architectural Information #
#######################################

# free area to execute and initialize stuff before starting BenchIT
# e.g. set the LD_LIBRARY_PATH or load modules or ...
# DO NOT CHANGE THE LINES "#start of" and "#end of"!

#start of BENCHIT_PRE_INIT

#end of BENCHIT_PRE_INIT

# Short specification of your CPU - will be used for the output-filename
# ex. \"AmK7\" for AMD Athlon, \"InP4\" for Intel Pentium IV, \"MIPS\", \"SX6\"...
BENCHIT_ARCH_SHORT=\"${BENCHIT_ARCH_SHORT}\"

# CPU clock rate in Megahertz (e.g. 700M, 2000M, ...)
BENCHIT_ARCH_SPEED=\"${BENCHIT_ARCH_SPEED}M\"

# To debug the application in case of problems, set the parameter DEBUGLEVEL
# to one of the following values:
# 0 for the standard ouput (default)
# 1 additionally a message for each function call (on entry and exit)
# 2 additionally a message for each loop (on entry, cycle, and exit)
# 3 additionally a message for each code section (use this if you encounter
#   problems when the output-file is written)
BENCHIT_DEBUGLEVEL=0

# Batch or runtime environment on your system
# Look into <BENCHITDIR>/tools/environments for available environments
BENCHIT_ENVIRONMENT=\"${BENCHIT_ENVIRONMENT}\"

# additional information about the system, that will be included in the filenames 
# of the result-files
BENCHIT_FILENAME_COMMENT=\"\"

# If you don't want to load settings from the kernel's PARAMETERS file, set this
# option to 1.
BENCHIT_IGNORE_PARAMETER_FILE=0

# If you don't want to configure the measurement run in an interactive mode
# change this parameter to 0.
BENCHIT_INTERACTIVE=0

# Number of processors to use
BENCHIT_NUM_CPUS=${BENCHIT_NUM_CPUS}

# Number of processes, used by MPI kernels
# defaults to \${BENCHIT_NUM_CPUS} if not set, i.e MPI kernels use all available CPUs
# might need adaptation in hybrid (MPI + OpneMP) kernels
BENCHIT_NUM_PROCESSES=

# Number of threads per process, used by OpenMP parallelized kernels
# defaults to \${BENCHIT_NUM_CPUS} if not set, i.e OpenMP kernels use all available CPUs
# might need adaptation in hybrid (MPI + OpneMP) kernels
BENCHIT_NUM_THREADS_PER_PROCESS=

# BenchIT allows for different accuracies of the measurements. This means how
# often BenchIT will repeat a measurement run to eliminate outliers. Set the
# parameter ACCURACY to any value from 0 (no repetitions) to any number
# you like (usually 10 repetitions should be more than enough).
# Defaults to 2 if not set.
BENCHIT_RUN_ACCURACY=2

# Maximum size of the coredump in MB, disabled by default.
BENCHIT_RUN_COREDUMPLIMIT=0

# Output file to redirect batch system output to
BENCHIT_RUN_REDIRECT_CONSOLE=\"\"

# Some batch systems need an email address to send output to.
BENCHIT_RUN_EMAIL_ADDRESS=\"\"

# BenchIT offers two ways how the measurement problem sizes are arranged.
# Usually BenchIT cuts the problemsize in half and measures for that point.
# In the next iteration the new intervals are again cut in half and so on.
# To overide this and run the measurement linearly from problemsize 1 to
# maxproblemsize set LINEAR=1 (default=0)
BENCHIT_RUN_LINEAR=0

# Maximum memory to use, in MB. No 'M' suffix here, e.g. 128, 512, ...
BENCHIT_RUN_MAX_MEMORY=${BENCHIT_RUN_MAX_MEMORY}

# Name of the queue you want to use on batch systems
# Normally you do not need this, as the queue is selected by the batch system
BENCHIT_RUN_QUEUENAME=\"\"

# Do not actually run kernels, instead print what the call would be.
# Useful for troubleshooting batch systems
BENCHIT_RUN_TEST=0

# Maximum time a kernel may run, in seconds
# 0 means no timelimit, and the kernel will run until all measurements have
# completed
BENCHIT_RUN_TIMELIMIT=${BENCHIT_RUN_TIMELIMIT}

# The Vampir suite allows the generation of trace files that can be displayed
# by vampir as well to help you debug your kernel. If you want to use vampir
# change the parameter USE_VAMPIR_TRACE to 1. (default=0)
BENCHIT_USE_VAMPIR_TRACE=0


#####################################
# Section 2 Library Linking Options #
#####################################

# pThreads
BENCHIT_CPP_PTHREADS=\"${BENCHIT_CPP_PTHREADS}\"
BENCHIT_LIB_PTHREAD=\"${BENCHIT_LIB_PTHREAD}\"

# Performance Counter Library
BENCHIT_CPP_PCL=\"${BENCHIT_CPP_PCL} -DUSE_PCL\"
BENCHIT_LIB_PCL=\"${BENCHIT_LIB_PCL}\"

# Performance Application Programming Interface
BENCHIT_CPP_PAPI=\"-DUSE_PAPI\"
BENCHIT_LIB_PAPI=\"\"

# BLAS-Routines
BENCHIT_CPP_BLAS=\"\"
BENCHIT_LIB_BLAS=\"-lblas\"

# MPI-Library
BENCHIT_CPP_MPI=\"${BENCHIT_CPP_MPI} -DUSE_MPI\"
BENCHIT_LIB_MPI=\"${BENCHIT_LIB_MPI}\"

# PVM-Library
BENCHIT_CPP_PVM=\"${BENCHIT_CPP_PVM}\"
BENCHIT_LIB_PVM=\"${BENCHIT_LIB_PVM}\"

# ACML-Library
BENCHIT_CPP_ACML=\"${BENCHIT_CPP_ACML}\"
BENCHIT_LIB_ACML=\"${BENCHIT_LIB_ACML} -lacml\"

# ATLAS-Library
BENCHIT_CPP_ATLAS=\"${BENCHIT_CPP_ATLAS}\"
BENCHIT_LIB_ATLAS=\"${BENCHIT_LIB_ATLAS} -latlas\"

# ESSL-Library
BENCHIT_CPP_ESSL=\"${BENCHIT_CPP_ESSL}\"
BENCHIT_LIB_ESSL=\"${BENCHIT_LIB_ESSL} -lessl\"

# MKL-Library
BENCHIT_CPP_MKL=\"${BENCHIT_CPP_MKL}\"
BENCHIT_LIB_MKL=\"${BENCHIT_LIB_MKL} -lmkl\"

# SCSL-Library
BENCHIT_CPP_SCSL=\"${BENCHIT_CPP_SCSL}\"
BENCHIT_LIB_SCSL=\"${BENCHIT_LIB_SCSL} -lscsl\"

# FFTW3-Library
BENCHIT_CPP_FFTW3=\"${BENCHIT_CPP_FFTW3}\"
BENCHIT_LIB_FFTW3=\"${BENCHIT_LIB_FFTW3} -lfftw3\"


##############################
# Section 3 Compiler Options #
##############################

# Common include paths
BENCHIT_INCLUDES=\"-I. -I\${BENCHITROOT} -I\${BENCHITROOT}/tools\"

##################################
# Section 3.1 C Compiler Options #
##################################

# name of C Compiler
BENCHIT_CC=\"${BENCHIT_CC}\"

# name of C Linker
BENCHIT_CC_LD=\"\${BENCHIT_CC}\"

# Compilerflags
BENCHIT_CC_C_FLAGS=\"\"

# Additional Compilerflags - used for normal files
BENCHIT_CC_C_FLAGS_STD=\"${BENCHIT_CC_C_FLAGS_STD}\"

# Additional Compilerflags - used for the kernels
BENCHIT_CC_C_FLAGS_HIGH=\"${BENCHIT_CC_C_FLAGS_HIGH}\"

# Additional Compilerflags - used for OpenMP kernel
BENCHIT_CC_C_FLAGS_OMP=\"\"

# Standard Linkerflags
BENCHIT_CC_L_FLAGS=\"-lm\"

######################################
# Section 3.2 MPI C Compiler Options #
######################################

# name of C Compiler
BENCHIT_MPICC=\"\${BENCHIT_CC}\"

# name of C Linker
BENCHIT_MPICC_LD=\"\${BENCHIT_MPICC}\"

# Compilerflags
BENCHIT_MPICC_C_FLAGS=\"\"

# Additional Compilerflags - used for normal files
BENCHIT_MPICC_C_FLAGS_STD=\"${BENCHIT_CC_C_FLAGS_STD}\"

# Additional Compilerflags - used for the kernels
BENCHIT_MPICC_C_FLAGS_HIGH=\"${BENCHIT_CC_C_FLAGS_HIGH}\"

# Additional Compilerflags - used for OpenMP kernel
BENCHIT_MPICC_C_FLAGS_OMP=\"\"

# Standard Linkerflags
BENCHIT_MPICC_L_FLAGS=\"\${BENCHIT_CC_L_FLAGS} -lmpi\"

####################################
# Section 3.3 C++ Compiler Options #
####################################

# Name of C++ Compiler
BENCHIT_CXX=\"${BENCHIT_CXX}\"

# Name of C++ Linker
BENCHIT_CXX_LD=\"\${BENCHIT_CXX}\"

# Compilerflags
BENCHIT_CXX_C_FLAGS=\"\${BENCHIT_CC_C_FLAGS}\"

# Additional Compilerflags - used for normal files
BENCHIT_CXX_C_FLAGS_STD=\"${BENCHIT_CXX_C_FLAGS_STD}\"

# Additional Compilerflags - used for the kernels
BENCHIT_CXX_C_FLAGS_HIGH=\"${BENCHIT_CXX_C_FLAGS_HIGH}\"

# Additional Compilerflags - used for OpenMP kernel
BENCHIT_CXX_C_FLAGS_OMP=\"\"

# Standard Linkerflags
BENCHIT_CXX_L_FLAGS=\"-lm\"

########################################
# Section 3.4 MPI C++ Compiler Options #
########################################

# name of C Compiler
BENCHIT_MPIXX=\"\${BENCHIT_CXX}\"

# name of C Linker
BENCHIT_MPICXX_LD=\"\${BENCHIT_MPICC}\"

# Compilerflags
BENCHIT_MPICXX_C_FLAGS=\"\"

# Additional Compilerflags - used for normal files
BENCHIT_MPICXX_C_FLAGS_STD=\"${BENCHIT_CXX_C_FLAGS_STD}\"

# Additional Compilerflags - used for the kernels
BENCHIT_MPICXX_C_FLAGS_HIGH=\"${BENCHIT_CXX_C_FLAGS_HIGH}\"

# Additional Compilerflags - used for OpenMP kernel
BENCHIT_MPICXX_C_FLAGS_OMP=\"\"

# Standard Linkerflags
BENCHIT_MPICXX_L_FLAGS=\"\${BENCHIT_CXX_L_FLAGS} -lmpi\"

##########################################
# Section 3.5 Fortran77 Compiler Options #
##########################################

# Name of Fortran77 Compiler
BENCHIT_F77=\"${BENCHIT_F77}\"

# Name of Fortran77 Linker
BENCHIT_F77_LD=\"\${BENCHIT_F77}\"

# Compilerflags
BENCHIT_F77_C_FLAGS=\"\"

# Additional Compilerflags - used for normal files
BENCHIT_F77_C_FLAGS_STD=\"${BENCHIT_F77_C_FLAGS_STD}\"

# Additional Compilerflags - used for the kernels
BENCHIT_F77_C_FLAGS_HIGH=\"${BENCHIT_F77_C_FLAGS_HIGH}\"

# Additional Compilerflags - used for OpenMP kernel
BENCHIT_F77_C_FLAGS_OMP=\"\"

# Standard Linkerflags
BENCHIT_F77_L_FLAGS=\"-lm\"

##############################################
# Section 3.6 MPI Fortran77 Compiler Options #
##############################################

# Name of Fortran77 Compiler
BENCHIT_MPIF77=\"\"

# Name of Fortran77 Linker
BENCHIT_MPIF77_LD=\"\${BENCHIT_MPIF77}\"

# Compilerflags
BENCHIT_MPIF77_C_FLAGS=\"\"

# Additional Compilerflags - used for normal files
BENCHIT_MPIF77_C_FLAGS_STD=\"\"

# Additional Compilerflags - used for the kernels
BENCHIT_MPIF77_C_FLAGS_HIGH=\"\"

# Additional Compilerflags - used for OpenMP kernel
BENCHIT_MPIF77_C_FLAGS_OMP=\"\"

# Standard Linkerflags
BENCHIT_MPIF77_L_FLAGS=\"\"

##########################################
# Section 3.7 Fortran90 Compiler Options #
##########################################

# Name of Fortran90 Compiler
BENCHIT_F90=\"${BENCHIT_F90}\"

# Name of Fortran90 Linker
BENCHIT_F90_LD=\"\${BENCHIT_F90}\"

# Compilerflags
BENCHIT_F90_C_FLAGS=\"\"

# Additional Compilerflags - used for normal files
BENCHIT_F90_C_FLAGS_STD=\"${BENCHIT_F90_C_FLAGS_STD}\"

# Additional Compilerflags - used for the kernels
BENCHIT_F90_C_FLAGS_HIGH=\"${BENCHIT_F90_C_FLAGS_HIGH}\"

# Additional Compilerflags - used for OpenMP kernel
BENCHIT_F90_C_FLAGS_OMP=\"\"

# Additional Compilerflags - choose the source format (e.g -free for freeform under ifort)
BENCHIT_F90_SOURCE_FORMAT_FLAG=""

# Standard Linkerflags
BENCHIT_F90_L_FLAGS=\"-lm\"

##########################################
# Section 3.8 Fortran95 Compiler Options #
##########################################

# Name of Fortran95 Compiler
BENCHIT_F95=\"${BENCHIT_F95}\"

# Name of Fortran95 Linker
BENCHIT_F95_LD=\"\${BENCHIT_F95}\"

# Compilerflags
BENCHIT_F95_C_FLAGS=\"\"

# Additional Compilerflags - used for normal files
BENCHIT_F95_C_FLAGS_STD=\"${BENCHIT_F95_C_FLAGS_STD}\"

# Additional Compilerflags - used for the kernels
BENCHIT_F95_C_FLAGS_HIGH=\"${BENCHIT_F95_C_FLAGS_HIGH}\"

# Additional Compilerflags - used for OpenMP kernel
BENCHIT_F95_C_FLAGS_OMP=\"\"

# Additional Compilerflags - choose the source format (e.g -free for freeform under ifort)
BENCHIT_F95_SOURCE_FORMAT_FLAG=""

# Standard Linkerflags
BENCHIT_F95_L_FLAGS=\"-lm\"

############################
# Section 3.9 Java Options #
############################

# Name of Java Compiler
BENCHIT_JAVAC=\"${BENCHIT_JAVAC}\"
 
# Compilerflags
BENCHIT_JAVAC_FLAGS=\"\"

# Additional Compilerflags - used for the kernels
BENCHIT_JAVAC_FLAGS_HIGH=\"${BENCHIT_JAVAC_FLAGS_HIGH}\"

# Name of Java Virtual Machine
BENCHIT_JAVA=\"${BENCHIT_JAVA}\"

# Flags for the Java Virtual Machine
BENCHIT_JAVA_FLAGS=\"\"

# Location of the Java-SDK
BENCHIT_JAVA_HOME=\"${BENCHIT_JAVA_HOME}\"

# Path to Benchits own libraries
BENCHIT_LD_LIBRARY_PATH=\"${BENCHITROOT}/jbi/jni\"

################################
# Section 4 Additional Options #
################################

OMP_DYNAMIC=FALSE
OMP_NESTED=FALSE
BENCHIT_MPIRUN=\"mpirun\"

# Directory where to store files with progress information of running measurements
# can be an absolute path or relativ to BENCHITROOT
# if you set this to \"\" files with progress information won't be created
BENCHIT_PROGRESS_DIR=\"progress\"

# HOTFIX for cross compiling
# name and flags of C-compiler for compiling c-files that run locally when cross compiling
# (used for envhashbuilder and fileversion)
# when set to "" BENCHIT_CC, BENCHIT_CC_C_FLAGS and BENCHIT_CC_L_FLAGS will be used
BENCHIT_LOCAL_CC=\"\"
BENCHIT_LOCAL_CC_C_FLAGS=\"\"
BENCHIT_LOCAL_CC_L_FLAGS=\"\"

">"${BENCHITROOT}/LOCALDEFS/${BENCHIT_NODENAME}"

	modified_localdefs=1
	printf "         Done.\n"
}

#####################################################################

if [ -z "${BENCHITROOT}" ]; then
	# Script executed stand-alone
	# remember the actual path
	OLDDIR="`pwd`"
	MYDIR="`dirname \"${0}\"`"
	cd "${MYDIR}"
	CONFIGURE_MODE="FIRSTTIME"
	. ./configure
	cd ${OLDDIR}
fi

# variables for storing if a file has been written
unset modified_input_arch modified_input_disp modified_localdefs

#####################################################################

printf "
BenchIT: Welcome to BenchIT!
         This script is invoked because there are no LOCALDEFS for the target-
         machine or you ran it manually.
         The script will now generate a LOCALDEFS-file for the target-machine.\n"

if [ -f "${BENCHITROOT}/LOCALDEFS/$BENCHIT_NODENAME" ]; then
	printf "BenchIT: It seems that there are already LOCALDEFS for the target-machine.\n"
	printf "         Overwrite configuration for ${BENCHIT_NODENAME}? (y/n) "
	read overwrite
	if [ "${overwrite}" = "y" ]; then
		printf "BenchIT: Overwriting configuration\n"
	else
		printf "BenchIT: Aborting...\n"
		exit 127
	fi
fi

if [ "${BENCHIT_CROSSCOMPILE}" = "1" ] && [ "${BENCHIT_INTERACTIVE}" = "1" ]; then
	printf "\
BenchIT: The script has been set up to generate LOCALDEFS for a different
         machine than you are logged into. (Maybe you want to cross-compile?)
         The featured autodetection routine can only find compiler and library
         settings for the current machine.\n
         WARNING: If you choose to use autodetection be aware that it is likely
         that some settings are not correct for the target-machine without
         customizing the generated files. (You will have the chance to do that
         during this setup process.)
         If you choose not to execute the automatic detection, a skeleton file
         will be copied as a starting point for you to fill in the necessary
         settings.
         Do you want to execute automatic setup? (y/n) "
	read sel
	if [ "${sel}" = "y" ]; then
		autodetection
	else
		cp "${BENCHITROOT}/LOCALDEFS/PROTOTYPE" "${BENCHITROOT}/LOCALDEFS/${BENCHIT_NODENAME}"
		cp "${BENCHITROOT}/LOCALDEFS/PROTOTYPE_input_architecture" "${BENCHITROOT}/LOCALDEFS/${BENCHIT_NODENAME}_input_architecture"
		cp "${BENCHITROOT}/LOCALDEFS/PROTOTYPE_input_display" "${BENCHITROOT}/LOCALDEFS/${BENCHIT_NODENAME}_input_display"
		modified_localdefs=1
	fi
else
	printf "\nBenchIT: Running autodetection routine...\n"
	autodetection
fi

echo ""

# now let the user edit the written file
if [ "${BENCHIT_INTERACTIVE}" = "1" ]; then
  printf "         Do you want to edit your config file? (y/n) "
  read e1
  if [ "$e1" = "y" ]; then
  	editfile "${BENCHITROOT}/LOCALDEFS/${BENCHIT_NODENAME}"
  fi
  echo ""
fi


# now the input files
if [ -f "${BENCHITROOT}/LOCALDEFS/${BENCHIT_NODENAME}_input_architecture" ] ; then
  echo "BenchIT: It seems that the file ${BENCHIT_NODENAME}_input_architecture already exists."
  if [ "${BENCHIT_INTERACTIVE}" = "1" ]; then
    printf "         Do you want to overwrite this file? (y/n) "
    read e1
    if [ "$e1" = "y" ]; then
		cp -f "${BENCHITROOT}/LOCALDEFS/PROTOTYPE_input_architecture" "${BENCHITROOT}/LOCALDEFS/${BENCHIT_NODENAME}_input_architecture"
		modified_input_arch=1
	fi
  else
    echo "         Leaving old file as it is."
  fi
else
  cp -f "${BENCHITROOT}/LOCALDEFS/PROTOTYPE_input_architecture" "${BENCHITROOT}/LOCALDEFS/${BENCHIT_NODENAME}_input_architecture"
  modified_input_arch=1
fi

if [ "${BENCHIT_INTERACTIVE}" = "1" ]; then
  printf "         Do you want to edit your architecture information?\n"
  printf "         NOTE: The BenchIT webserver might refuse files without these. (y/n) "
  read e1
  if [ "$e1" = "y" ]; then
    editfile "${BENCHITROOT}/LOCALDEFS/${BENCHIT_NODENAME}_input_architecture"
  #else
  #  echo "No architecture information given - Webserver will refuse the output files!"
  fi
  echo ""
fi


if [ -f "${BENCHITROOT}/LOCALDEFS/${BENCHIT_NODENAME}_input_display" ] ; then
  echo "BenchIT: It seems that the file ${BENCHIT_NODENAME}_input_display already exists."
  if [ "${BENCHIT_INTERACTIVE}" = "1" ]; then
    printf "         Do you want to overwrite this file? (y/n) "
    read e1
    if [ "$e1" = "y" ]; then
		cp -f "${BENCHITROOT}/LOCALDEFS/PROTOTYPE_input_display" "${BENCHITROOT}/LOCALDEFS/${BENCHIT_NODENAME}_input_display"
		modified_input_disp=1
	fi
  else
    echo "         Leaving old file as it is."
  fi
else
  cp -f "${BENCHITROOT}/LOCALDEFS/PROTOTYPE_input_display" "${BENCHITROOT}/LOCALDEFS/${BENCHIT_NODENAME}_input_display"
  modified_input_disp=1
fi


if [ "${BENCHIT_INTERACTIVE}" = "1" ]; then
  printf "         Do you want to edit your display information?\n"
  printf "         NOTE: This is only for experts and developers (y/n) "
  read e1
  if [ "$e1" = "y" ]; then
    editfile "${BENCHITROOT}/LOCALDEFS/${BENCHIT_NODENAME}_input_display"
  fi
  echo ""
fi


#
#
# ok - that's all folks
echo "BenchIT: System setup complete. The following files have been written:"
[ -n "${modified_localdefs}" ] && \
echo "         ${BENCHITROOT}/LOCALDEFS/${BENCHIT_NODENAME}"
[ -n "${modified_input_arch}" ] && \
echo "         ${BENCHITROOT}/LOCALDEFS/${BENCHIT_NODENAME}_input_architecture"
[ -n "${modified_input_disp}" ] && \
echo "         ${BENCHITROOT}/LOCALDEFS/${BENCHIT_NODENAME}_input_display"

exit 0

