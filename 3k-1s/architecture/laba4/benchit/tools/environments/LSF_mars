#!/bin/sh
#####################################################################
# BenchIT - Performance Measurement for Scientific Applications
# Contact: developer@benchit.org
#
# $Id: LSF_mars 1 2009-09-11 12:26:19Z william $
# $URL: svn+ssh://william@rupert.zih.tu-dresden.de/svn-base/benchit-root/BenchITv6/tools/environments/LSF_mars $
# For license details see COPYING in the package base directory
#####################################################################


if [ "${BENCHIT_RUN_SINGLE_PARTITION}" = "" ]; then
    BENCHIT_RUN_SINGLE_PARTITION=0
fi

if [ "${BENCHIT_RUN_CROSS_PARTITION}" = "" ]; then
    BENCHIT_RUN_CROSS_PARTITION=0
fi

if [ "${BENCHIT_RUN_SINGLE_PARTITION}" = "0" ] && [ "${BENCHIT_RUN_CROSS_PARTITION}" = "0" ]; then
   BENCHIT_RUN_CROSS_PARTITION=1
fi

if [ "${BENCHIT_RUN_SINGLE_PARTITION}" = "1" ] && [ "${BENCHIT_RUN_CROSS_PARTITION}" = "1" ]; then
   echo "You cannot have BENCHIT_RUN_SINGLE_PARTITION and BENCHIT_RUN_CROSS_PARTITION enabled at the same time"
   exit 1
fi


########################################################################
# FIRST PART: ASSEMBLE COMMAND
########################################################################

# kernel execute command
execute_cmd="${BENCHIT_KERNELBINARY} ${BENCHIT_KERNELBINARY_ARGS}"

# batch-job submission command
batch_cmd="bsub"

# MPI-Specific BENCHIT_RUN_USE_MPI
# old command:	batch_cmd="${batch_cmd} pam -mpi -a altix -auto_place"
# batch_cmd="${batch_cmd} mpirun -np ${BENCHIT_NUM_PROCESSES}"
if [ "${BENCHIT_RUN_USE_MPI}" = "1" ]; then
   if [ "${BENCHIT_RUN_SINGLE_PARTITION}" = "1" ]; then
      batch_cmd="${batch_cmd} -R span[hosts=1]"
      batch_cmd="${batch_cmd} -n ${BENCHIT_NUM_CPUS}"
      batch_cmd="${batch_cmd} mpirun -np ${BENCHIT_NUM_PROCESSES}"
   fi

   if [ "${BENCHIT_RUN_CROSS_PARTITION}" = "1" ]; then
      batch_cmd="${batch_cmd} -n ${BENCHIT_NUM_CPUS}"
      batch_cmd="${batch_cmd} pamrun"
   fi
fi

# OMP-Specific BENCHIT_RUN_USE_OPENMP
if [ "${BENCHIT_RUN_USE_OPENMP}" = "1" ]; then
   if [ "${BENCHIT_RUN_SINGLE_PARTITION}" = "1" ]; then
      batch_cmd="${batch_cmd} -R span[hosts=1]"		
      batch_cmd="${batch_cmd} -n ${BENCHIT_NUM_CPUS}"
   fi
   if [ "${BENCHIT_RUN_CROSS_PARTITION}" = "1" ]; then
      batch_cmd="${batch_cmd} -n ${BENCHIT_NUM_CPUS}"
   fi
fi


########################################################################
# SECOND PART: SAVE ENVIRONMENT IF NECESSARY
########################################################################

env | grep BENCHIT | sed -e 's/^\([^=]*\)=\(.*\)$/export \1=\"\2\"/g'> ${BENCHITROOT}/${BENCHIT_KERNELNAME}_env

########################################################################
# THIRD PART: EXECUTE AND CLEANUP
########################################################################

if [ -n "${BENCHIT_RUN_QUEUEOPTIONS}" ]; then
	batch_cmd="${batch_cmd} ${BENCHIT_RUN_QUEUEOPTIONS}"
fi

if [ -n "${BENCHIT_RUN_EMAIL_ADDRESS}" ]; then
	batch_cmd="${batch_cmd} -u ${BENCHIT_RUN_EMAIL_ADDRESS}"
fi

if [ -n "${BENCHIT_RUN_REDIRECT_CONSOLE}" ]; then
	batch_cmd="${batch_cmd} -o ${BENCHIT_RUN_REDIRECT_CONSOLE}"
fi

if [ -n "${BENCHIT_RUN_QUEUENAME}" ]; then
	batch_cmd="${batch_cmd} -q ${BENCHIT_RUN_QUEUENAME}"
fi

#if [ -n "${BENCHIT_RUN_QUEUETIMELIMIT}" ] && [ ${BENCHIT_RUN_QUEUETIMELIMIT} -gt 0 ]; then
#	# Need minutes for LSF
#	qtimelimit=$((${BENCHIT_RUN_QUEUETIMELIMIT} / 60))
#	batch_cmd="${batch_cmd} -W ${qtimelimit}"
#else
#	# Extend BenchIT timelimit by 10% for queueing
#	qtimelimit=$((${BENCHIT_RUN_TIMELIMIT} * 11 / 600))
#	if [ "${qtimelimit}" = "$((${BENCHIT_RUN_TIMELIMIT} / 60))" ]; then
#		qtimelimit=$((${qtimelimit} + 1))
#	fi
#fi
#batch_cmd="${batch_cmd} -W ${qtimelimit}"

if [ -n "${BENCHIT_RUN_COREDUMPLIMIT}" ]; then
  if [ "${BENCHIT_RUN_COREDUMPLIMIT}" != "0" ]; then
    batch_cmd="${batch_cmd} -C $((BENCHIT_RUN_COREDUMPLIMIT * 1024))"
  fi
fi

if [ -n "${BENCHIT_RUN_MAX_MEMORY}" ]; then
  if [ "${BENCHIT_RUN_MAX_MEMORY}" != "0" ]; then
    batch_cmd="${batch_cmd} -M $((BENCHIT_RUN_MAX_MEMORY * 1024))"
  fi
fi


if [ -n "${BENCHIT_FILENAME_COMMENT}" ]; then
  script="${BENCHITROOT}/temp_script_file_${BENCHIT_KERNELNAME}.${BENCHIT_FILENAME_COMMENT}"
else
  script="${BENCHITROOT}/temp_script_file_${BENCHIT_KERNELNAME}"
fi

# Remove old script if one exists
rm -f ${script}

# Assemble script for submission to the batch system
echo "#!/bin/sh" > ${script}
echo "cd ${BENCHITROOT}" >> ${script}
echo ". ./${BENCHIT_KERNELNAME}_env" >> ${script}
echo "${execute_cmd}" >> ${script}

if [ "${BENCHIT_RUN_CLEAN}" = "1" ]; then
	echo "rm -f ${BENCHIT_KERNELBINARY}" >> ${script}
	echo "rm ${script}" >> ${script}
fi

chmod +x ${script}

# Submit job to the batch system
batch_cmd="${batch_cmd} ${script}"
if [ "$BENCHIT_RUN_TEST" != "1" ]; then
	echo "Batch command:"
	echo ${batch_cmd}	
	${batch_cmd}
else
	echo ${batch_cmd}
	echo "---------------------------------------------------------"
	echo "cat LSF temporary script:"
	cat ${script}
	echo "---------------------------------------------------------"
fi

