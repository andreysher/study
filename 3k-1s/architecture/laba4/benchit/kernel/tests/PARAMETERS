#!/bin/sh
#####################################################################
# BenchIT - Performance Measurement for Scientific Applications
# Contact: developer@benchit.org
#
# $Id$
# $URL$
# For license details see COPYING in the package base directory
#####################################################################
# Kernel: measures read latency of data located in different cache
#         levels or memory of certain CPUs.
#####################################################################

 #additional information (e.g Turbo Boost enabled/disabled)
 COMMENT=""

 #at&t-style inline assembly is used so other compilers might not work
 BENCHIT_CC=gcc
 #BENCHIT_CC_C_FLAGS="-g"
 #disable compiler optimization. Optimisations would destroy the measurement, as some obviously
 #useless operations when touching memory would be removed by the compiler 
 BENCHIT_CC_C_FLAGS_HIGH="-O0"

 #list of memorysizes to use for the measurement
 #format: "x,y,z"or "x-y" or "x-y/step" or any combination
 #BENCHIT_KERNEL_PROBLEMLIST="8192-131071/4096,131072-4194303/32768,4194304-14999999/524288,15000000-39999999/2000000,40000000-200000000/8000000"

 #alternative: automatically generate logarithmic scale
 #MIN should be about half the L1 size
 #MAX should be at least twice the last level cache size
 BENCHIT_KERNEL_MIN=16000
 BENCHIT_KERNEL_MAX=200000000
 BENCHIT_KERNEL_STEPS=100

 #Allocation method: (G/L) (default L)
 #G: one global block of memory allocated and initialized by master thread
 #L: each thread allocates and initilizes its own memory
 #has no effect on UMA Systems
 #effect on NUMA Systems depends on numactl setting, when used with localalloc policy option G results in
 #memory being allocated at one numa node, option L results in memory of each thread being allocated at the 
 #node the associated thread is runing on. If numactl is set to interleaved allocation, G and L should show
 #the same result
 BENCHIT_KERNEL_ALLOC="L"
 
 #use hugepages (0/1) (default 0, 1 recommended if hugetlbfs is available)
 BENCHIT_KERNEL_HUGEPAGES=0
 #hugepage directory, only needed when setting value above to "1"
 BENCHIT_KERNEL_HUGEPAGE_DIR="/mnt/huge"

 #number of accesses during the latency measurement for each memorysize (default 1024)
 #will be automatically reduced to smaller values for small memorysizes, if not as many accesses as
 #specified fit into the memory with the specified alignment
 #has to be a multiple of 32
 BENCHIT_KERNEL_ACCESSES=1024
 
 #defines how often each memorysize is measured (default 4)
 BENCHIT_KERNEL_RUNS=4

 #defines which cpus to run on, if not set sched_getaffinity is used to determine allowed cpus
 #format: "x,y,z"or "x-y" or "x-y/step" or any combination
 BENCHIT_KERNEL_CPU_LIST="0,1,2,3"

 #size and alignment of memory blocks in byte, has to be a power of 2
 #there will be only one access per block per measurement, so this avoids multiple accesses to
 #single cachelines during the measurement, if choosen higher than cacheline width
 #(should by > 4x cacheline width to reduce impact of line prefetches, non power of 2 multiples might reduce bank conflicts)
 BENCHIT_KERNEL_ALIGNMENT=256

 #position of accesses within the aligned blocks of memory (has to be smaler than ALIGNMENT)
 #can be used to check behaviour when accesses cross cacheline bondaries
 BENCHIT_KERNEL_OFFSET=0

 #number of accesses when using memory (default 4)
 BENCHIT_KERNEL_USE_ACCESSES=4
 
 #usage mode: (M/O/E/S/I/F) (default E)
 #the target coherency state when using memory
 #M: Modified,  leaves accessed cachelines in modified state after usage, shows penalty of writebacks
 #E: Exclusive, leaves accessed cachelines in exclusive state after usage, avoids writebacks
 #I: Invalid,   invalidates caches after usage, only usefull to test memory controller
 #S: Shared,    shares unmodified cachelines with another CPU, other CPU reads last
 #F: Forward,   shares unmodified cachelines with another CPU, other CPU reads first
 #O: Owned,     shares modified cachelines with another CPU
 BENCHIT_KERNEL_USE_MODE="E"
 #S/O/F require a CPU to share cachelines with, which must not be part of the CPU_LIST
 BENCHIT_KERNEL_SHARE_CPU="7"

 #define which cache levels to flush (default no flushes)
 #avoids writeback penalties when use mode is M
 BENCHIT_KERNEL_FLUSH_L1=1
 BENCHIT_KERNEL_FLUSH_L2=1
 BENCHIT_KERNEL_FLUSH_L3=1
 
 #number of accesses per cacheline to flush cache (default 2)
 BENCHIT_KERNEL_FLUSH_ACCESSES=2
 #flush mode: (M/E/I) (default E)
 #the target coherency state when flushing memory
 #M: Modified, fills cache with modified lines, results in writeback penalties before using other memory
 #E: Exclusive, fills cache with lines that do not have to be written back, does not cause writeback penalties
 #I: Invalid, fills caches with invalid lines, CPUs might use free space for prefetching data
 BENCHIT_KERNEL_FLUSH_MODE="E"
 
 #TLB mode (default is 0)
 #which TLB Level is used at max
 #this is only implemented for 4K pages and will be ignored when hugepages are used
 # 0  - use all pages in the buffer, ignoring TLB limitations
 # >0 - use only as many pages as DTLB entries are available in the specified Level
 #Note: highly experimental: not recommended to be used
 BENCHIT_KERNEL_TLB_MODE=0

 #when enabled PAPI_INC and PAPI_LIB environment variables have to point to
 #the papi include directory or papi lib directory, respectively
 #!!! recompilation required if the following parameter is changed !!!
 BENCHIT_KERNEL_ENABLE_PAPI="0"
 #colon seperated list of counters that should be measured
 BENCHIT_KERNEL_COUNTERS="PAPI_L2_DCM"

 #max time a benchmark can run
 BENCHIT_KERNEL_TIMEOUT=3600
 
 #serialization instruction between data accesses and rdtsc (mfence|cpuid) (default: mfence)
 #changing this setting requires recompilation
 BENCHIT_KERNEL_SERIALIZATION="mfence"

 #default comment that will be displayed by the GUI summarizes used settings
 BENCHIT_KERNEL_COMMENT="${COMMENT} ${BENCHIT_KERNEL_OFFSET}B missaligned, alloc: ${BENCHIT_KERNEL_ALLOC}, hugep.: ${BENCHIT_KERNEL_HUGEPAGES}, use: ${BENCHIT_KERNEL_USE_MODE}${BENCHIT_KERNEL_USE_ACCESSES}, flush: ${BENCHIT_KERNEL_FLUSH_L1}${BENCHIT_KERNEL_FLUSH_L2}${BENCHIT_KERNEL_FLUSH_L3} - ${BENCHIT_KERNEL_FLUSH_MODE}${BENCHIT_KERNEL_FLUSH_ACCESSES}, TLB: ${BENCHIT_KERNEL_TLB_MODE}"

 #Uncomment settings that are not detected automatically on your machine
 # BENCHIT_KERNEL_CPU_FREQUENCY=
 # BENCHIT_KERNEL_L1_SIZE=
 # BENCHIT_KERNEL_L2_SIZE=
 # BENCHIT_KERNEL_L3_SIZE=
 # BENCHIT_KERNEL_CACHELINE_SIZE=
