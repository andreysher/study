#define temp_file "temp.txt"

#include "graph_lib.h"

typedef void* Graph;

typedef struct shlak{
	int number;
	struct shlak* next;
	int weigth;
	char* name;
}graph_el;
typedef struct shlak_two{
	int size;
	char type;
	char orient;
	char weigth;
	void* p_graph;
}graph;
typedef struct shlak_three{
	Graph gr;
	struct shlak_three* next;
}graphs;

graphs* head = NULL;

void add_graph_to_list(Graph grp){
	graphs* go_list = head;
	if(head == NULL){
		head = calloc(1, sizeof(graphs));
		head->gr = grp;
		return;
	}
	while(go_list->next != NULL){
		go_list = go_list->next;
	}
	go_list->next = calloc(1, sizeof(graphs));
	go_list = go_list->next;
	go_list->gr = grp;
	return;
}
void delete_graph_from_list(Graph grp){
	graphs* go_list = head;
	graphs* temp = calloc(1, sizeof(graphs));
	if(go_list->gr == grp){
		head = go_list->next;
		free(go_list);
		return;
	}
	while((go_list->next != NULL)||(go_list->next->gr != grp)){
		go_list = go_list->next;
	}
	if(go_list->next == NULL){
		if(go_list->gr == grp){
			free(go_list);
		}
		printf("error_delete_graph");
		return;
	}
	if(go_list->next->gr == grp){
		temp = go_list->next;
		go_list->next = go_list->next->next;
		free(temp);
		return;
	}
}
int chek_graph_in_list(Graph grp){
	graphs* go_list = head;
	while(go_list->next != NULL){
		if(go_list->gr == grp){
			return 1;
		}
		go_list = go_list->next;
	}
	if(go_list->gr == grp){
		return 1;
	}
	return 0;
}
Graph GraphCreate(int size, char type, char orient, char weigth){//+
	int i;
	if((size <= 0)&&((weigth != '0')||(weigth != '1'))&&((orient != '0')||(orient != '1'))&&((type != 'm')||(type != 'l'))){
		printf("error");
		return;
	}
	graph* result = calloc(1, sizeof(graph));
	if(type == 'm'){
		int** Matrix = calloc(size, sizeof(int*));
		for(i = 0; i < size; i++){
			*(Matrix + i) = calloc(size, sizeof(int));
		}
	result->p_graph = Matrix;
	}
	if(type == 'l'){
		graph_el* List = calloc(size, sizeof(graph_el));
		for(i = 0; i < size; i++){
			(List+i)->number = -1;
		}
		result->p_graph = List;
	}
	result->size = size;
	result->type = type;
	result->orient = orient;
	result->weigth = weigth;
	add_graph_to_list(result);
	return result;
}
void add_connection_matrix(void* p_mat, int from, int to, int weigth){//+
	int** mat = (int**)p_mat;
	mat[from][to] = weigth;
	return;
}
void add_connection_list(void* p_list, int from, int to, int weigth){//+
	graph_el* list = (graph_el*)p_list;
	graph_el* go = (graph_el*)list+from;
	while(go->next != NULL){
		go = go->next;
	}
	go->next = calloc(1, sizeof(graph_el));
	go = go->next;
	go->number = to;
	go->weigth = weigth;
	return;
}
void add_connection(Graph grap, int from, int to, int weigth){//+
	graph* grp = (graph*)grap;
	if((to < 0)&&(from < 0)&&(to > (grp->size))&&(from < (grp->size))){
		printf("error");
	}
	if(chek_graph_in_list(grap) != 1){
		printf("error");
		return;
	}
	if(grp->type == 'm'){
		if(grp->orient == '1'){
			add_connection_matrix(grp->p_graph, from, to, weigth);
		}
		if(grp->orient == '0'){
			add_connection_matrix(grp->p_graph, from, to, weigth);
			add_connection_matrix(grp->p_graph, to, from, weigth);
		}
	}
	if(grp->type == 'l'){
		if(grp->orient == '1'){
			add_connection_list(grp->p_graph, from, to, weigth);
		}
		if(grp->orient == '0'){
			add_connection_list(grp->p_graph, from, to, weigth);
			add_connection_list(grp->p_graph, to, from, weigth);
		}
	}
	return;
}
void delete_connection_matrix(void* p_mat, int from, int to){//+
	int** mat = (int**)p_mat;
	mat[from][to] = 0;
	return;
}
void delete_connection_list(void* p_list, int from, int to, int weigth){//+
	graph_el* list = (graph_el*)p_list;
	graph_el* go = list+from;
	graph_el* temp;

	while(go->next != NULL){
		if(go->next->number == to){
			temp = go->next;
			go->next = temp->next;
			free(temp);
			return;
		}
		go = go->next;
	}
	return;
}
void delete_connection(Graph grap, int from, int to, int weigth){//+
	graph* grp = (graph*)grap;
	if((to < 0)&&(from < 0)&&(to > (grp->size))&&(from < (grp->size))){
		printf("error");
	}
	if(chek_graph_in_list(grap) != 1){
		printf("error");
		return;
	}
	if(grp->type == 'm'){
		if(grp->orient == '1'){
			delete_connection_matrix(grp->p_graph, from, to);
		}
		if(grp->orient == '0'){
			delete_connection_matrix(grp->p_graph, from, to);
			delete_connection_matrix(grp->p_graph, to, from);
		}
	}
	if(grp->type == 'l'){
		if(grp->orient == '1'){
			delete_connection_list(grp->p_graph, from, to, weigth);
		}
		if(grp->orient == '0'){
			delete_connection_list(grp->p_graph, to, from, weigth);
			delete_connection_list(grp->p_graph, from, to, weigth);
		}
	}
}
int check_matrix(void* p_mat, int from, int to, int weigth){//+
	int** mat = (int**)p_mat;
	if(mat[from][to] == weigth){
		return 1;
	}
	return 0;
}
int chek_list(void* p_list, int from, int to, int weigth){//+
	graph_el* list = (graph_el*)p_list;
	graph_el* go = list+from;
	while(go->next != NULL){
		if(go->number == to){
			if(go->weigth == 0){
				return 0;
			}
			return 1;
		}
		go = go->next;
	}
	if(go->number = to){
		if(go->weigth == 0){
			return 0;
		}
		return 1;
	}
	return 0;
}
int chek(Graph grap, int from, int to, int weigth){//+
	graph* grp = (graph*)grap;
	if((to < 0)&&(from < 0)&&(to > (grp->size))&&(from < (grp->size))){
		printf("error");
	}
	if(chek_graph_in_list(grap) != 1){
		printf("error");
		return;
	}
	if(weigth == 0){
		return 0;
	}
	if(grp->type == 'm'){
		return check_matrix(grp->p_graph, from, to, weigth);
	}
	if(grp->type == 'l'){
		return chek_list(grp->p_graph, from, to, weigth);
	}
}
Graph Download_from_file(FILE* file){//+
	graph* rezult = calloc(1, sizeof(graph));
	int size, from, to, wt;
	char type, orient, weigth;
	if(fscanf(file, "%c %c %c", &type, &orient, &weigth) == EOF){
		printf("error");
	}
	fscanf(file, "%i", &size);
	rezult->type = type;
	rezult->orient = orient;
	rezult->weigth = weigth;
	rezult->size = size;
	rezult = GraphCreate(size, type, orient, weigth);
	if(weigth == '1'){
		while(fscanf(file, "%i %i %i", &from, &to, &wt) != EOF){
			add_connection(rezult, from, to, wt);
		}
	}
	if(weigth == '0'){
		while(fscanf(file, "%i %i", &from, &to) != EOF){
			add_connection(rezult, from, to, 1);
		}
	}
	return rezult;
}
Graph Copy_Graph(Graph grap){//+
	graph* grp = (graph*)grap;
	if(chek_graph_in_list(grap) != 1){
		printf("error");
		return;
	}
	int i, j;
	graph* rezult = calloc(1, sizeof(graph));
	FILE* f = fopen(temp_file, "a");
	fprintf(f, "%d\n", rezult);
	fclose(f);
	rezult->size = grp->size;
	rezult->type = grp->type;
	rezult->orient = grp->orient;
	rezult->weigth = grp->weigth;
	if(grp->type == 'm'){
		int** Matrix = calloc(grp->size, sizeof(int*));
		int** mat = (int**)grp->p_graph;
		for(i = 0; i < grp->size; i++){
			*(Matrix + i) = calloc(grp->size, sizeof(int));
		}
		for(i = 0; i < grp->size; i++){
			for(j = 0; j < grp->size; j++){
				add_connection_matrix(Matrix, i, j, mat[i][j]);
			}
		}
		rezult->p_graph = Matrix;
		add_graph_to_list(rezult);
		return rezult;
	}
	if(grp->type == 'l'){
		graph_el* List = calloc(rezult->size, sizeof(graph_el));
		graph_el* go, *go_list;
		graph_el* list = grp->p_graph;
		for(i = 0; i < rezult->size; i++){
			go_list = List+i;
			go = list+i;
				while(go->next != NULL){
					go_list->number = go->number;
					go_list->weigth = go->weigth;
					go_list->name = go->name;
					go_list->next = calloc(1, sizeof(graph_el));
					go = go->next;
					go_list = go_list->next;
				}
				go_list->number = go->number;
				go_list->weigth = go->weigth;
				go_list->name = go->name;
		}
		rezult->p_graph = List;
		add_graph_to_list(rezult);
		return rezult;
	}
	printf("error");
	return;
}
void Destroy_Graph(Graph grap){//+
	graph* grp = (graph*)grap;
	int i, j;
	if(chek_graph_in_list(grap) != 1){
		printf("error");
		return;
	}
	if(grp->size <= 0){
		return;
	}
	if(grp->type == 'm'){
		int** mat = grp->p_graph;
		for(i = 0; i < grp->size; i++){
			free(mat[i]);
		}
		free(mat);
		delete_graph_from_list(grap);
		free(grap);
	}
	if(grp->type == 'l'){
		graph_el* go;
		graph_el* list = grp->p_graph;
		graph_el* going;
		for(i = 0; i < grp->size; i++){
			go = list + i;
			while((go->next != NULL)&&(go->number != -1)){
				going = go->next;
				free(go);
				go = going;
			}
			free(go);
		}
		free(grp->p_graph);
		delete_graph_from_list(grap);
	}
	return;
}
void Save_Matrix_To_File(Graph grap, FILE* file){//+
	graph* grp = (graph*)Copy_Graph(grap);
	int** mat = (int**)grp->p_graph;
	int i, j;
	if(grp->orient == '1'){
		for(i = 0; i < grp->size; i++){
			for(j = 0; j < grp->size; j++){
				if(mat[i][j] != 0){
					if(grp->weigth == '1'){
						fprintf(file, "%i %i %i\n", i, j, mat[i][j]);
					}
					if(grp->weigth == '0'){
						fprintf(file, "%i %i\n", i, j);
					}
				}
			}
		}
	}
	if(grp->orient == '0'){
		for(i = 0; i < grp->size; i++){
			for(j = 0; j < grp->size; j++){
				if(mat[i][j] != 0){
					mat[j][i] = 0;
					if(grp->weigth == '1'){
						fprintf(file, "%i %i %i\n", i, j, mat[i][j]);
					}
					if(grp->weigth == '0'){
						fprintf(file, "%i %i\n", i, j);
					}
				}
			}
		}
	}
}
void Save_List_To_File(Graph grap, FILE* file){
	graph* grp = (graph*)Copy_Graph(grap);
	int i;
	graph_el* go;
	graph_el* list = (graph_el*)grp->p_graph;
	if(grp->orient == '1'){
		for(i = 0; i < grp->size; i++){
			go = list + i;
			while(go->next != NULL){
								
				if(go->number != -1){
					if(grp->weigth == '1'){
						fprintf(file, "%i %i %i\n", i, go->number, go->weigth);
					}
					if(grp->weigth == '0'){
						fprintf(file, "%i %i\n", i, go->number);
					}
				}
				go = go->next;
			}
			if(go->number != -1){
				if(grp->weigth == '0'){
					fprintf(file, "%i %i\n", i, go->number);
				}
				if(grp->weigth == '1'){
					fprintf(file, "%i %i %i\n", i, go->number, go->weigth);
				}
			}
		}
	}
	if(grp->orient == '0'){
		for(i = 0; i < grp->size; i++){
			go = list + i;
			while(go->next != NULL){
				if(go->number != -1){
					if(grp->weigth == '1'){
						fprintf(file, "%i %i %i\n", i, go->number, go->weigth);
						delete_connection(grp, go->number, i, go->weigth);
					}
					if(grp->weigth == '0'){
						fprintf(file, "%i %i\n", i, go->number);
						delete_connection(grp, go->number, i, 1);
					}
				}
				go = go->next;
			}
			if(go->number != -1){
					if(grp->weigth == '1'){
						fprintf(file, "%i %i %i\n", i, go->number, go->weigth);
						delete_connection(grp, go->number, i, go->weigth);
					}
					if(grp->weigth == '0'){
						fprintf(file, "%i %i\n", i, go->number);
						delete_connection(grp, go->number, i, 1);
					}
				}
		}
	}
}
void Save_Graph_To_File(Graph grap, FILE* file){
	graph* grp = (graph*)grap;
	if(chek_graph_in_list(grap) != 1){
		printf("error4564");
		return;
	}
	fprintf(file, "%c %c %c\n", grp->type, grp->orient, grp->weigth);
	fprintf(file, "%i\n", grp->size);
	if(grp->type == 'm'){
		Save_Matrix_To_File(grap, file);
	}
	if(grp->type == 'l'){
		Save_List_To_File(grap, file);
	}
	return;
}
int Give_Size(Graph grap){//+
	int rezult = 0;
	if(chek_graph_in_list(grap) != 1){
		puts("error");
		return;
	}
	graph* grp = (graph*)grap;
	rezult = grp->size;
	return rezult;
}
char Give_Type(Graph grap){//+
	graph* grp = (graph*)grap;
	char rezult = grp->type;
	if(chek_graph_in_list(grap) != 1){
		puts("error");
		return;
	}
	return rezult;
}
int Give_Weigth_connection_matrix(Graph grap, int from, int to){//+
	graph* grp = (graph*)grap;
	int** mat = (int**)grp->p_graph;
	return mat[from][to];
}
int Give_Weigth_connection_list(Graph grap, int from, int to){
	graph* grp = (graph*)grap;
	graph_el* list = (graph_el*)grp->p_graph;
	graph_el* now = list+from;
	while(now->next != NULL){
		if(now->number == to){
			return now->weigth;
		}
		now = now->next;
	}
	return 0;
}
int Give_Weigth_connection(Graph grap, int from, int to){
	graph* grp = (graph*)grap;
	if(chek_graph_in_list(grap) != 1){
		puts("error");
		return;
	}
	if(grp->type == 'm'){
		return Give_Weigth_connection_matrix(grap, from, to);
	}
	if(grp->type == 'l'){
		return Give_Weigth_connection_list(grap, from, to);
	}
}