#include <stdio.h>
#include <stdlib.h>

typedef struct _ListElement {
    int data;
    struct _ListElement * next;
} ListElement;

typedef struct _LinkedList {
    ListElement * root;
    int count;
} LinkedList;

typedef struct _TreeElement {
    int data;
    int height;
    struct _TreeElement * left;
    struct _TreeElement * right;
} TreeElement;

int height(TreeElement *trees) {
    return (trees) ? trees->height : 0;
}

int balancingIndex(TreeElement *tree) {
    return (height(tree->right) - height(tree->left));
}

void heightNorming(TreeElement *element) {
    int hl = height(element->left);
    int hr = height(element->right);
    element->height = (hl > hr) ? (hl + 1) : (hr + 1);
}

TreeElement *rotateRight(TreeElement *tree)
{
    TreeElement *new_root = tree->left;
    tree->left = new_root->right;
    new_root->right = tree;
    heightNorming(tree);
    heightNorming(new_root);
    return new_root;
}

TreeElement *rotateLeft(TreeElement *tree)
{
    TreeElement *new_root = tree->right;
    tree->right = new_root->left;
    new_root->left = tree;
    heightNorming(tree);
    heightNorming(new_root);
    return new_root;
}

void printTree(TreeElement *tree, int level)
{
    int i = 0;
    for (i = 0; i < level; i++) {
        printf("\t");
    }

    printf("%d\n", tree->data);

    if (tree->left != NULL) {
        printTree(tree->left, level + 1);
    }
    if (tree->right != NULL) {
        printTree(tree->right, level + 1);
    }
}

TreeElement *new_node(int num) {
    TreeElement *node = calloc(1, sizeof(TreeElement));
    node->data = num;
    return node;
}

TreeElement *balance(TreeElement *tree)
{
    heightNorming(tree);

    if (balancingIndex(tree) == 2)
    {
        if (balancingIndex(tree->right) < 0) {
            tree->right = rotateRight(tree->right);
        }
        return rotateLeft(tree);
    }
    if (balancingIndex(tree) == -2)
    {
        if (balancingIndex(tree->left) > 0)
            tree->left = rotateLeft(tree->left);
        return rotateRight(tree);
    }
    return tree;
}

TreeElement *insert(TreeElement *element, int num) {
    if (!element) return new_node(num);

    if (num < element->data)
        element->left = insert(element->left, num);
    else
        element->right = insert(element->right, num);
    return balance(element);
}

// LinkedList

void newElement(LinkedList *ll, int data) {
    ListElement *el = (ListElement *) calloc(1, sizeof(ListElement));
    el->data = data;

    el->next = ll->root;
    ll->root = el;

    ll->count++;
}

int less(ListElement *a, ListElement *b) {
    if (NULL == a) {
        return 0;
    }

    if (NULL == b) {
        return 1;
    }

    return (a->data < b->data) ? 1 : 0;
}

LinkedList *split(LinkedList *first) {
    LinkedList *second = (LinkedList *) calloc(1, sizeof(LinkedList));
    ListElement *go = first->root;
    int c = ((first->count / 2) - 1);
    for (int i = 0; i < c; i++) {
        go = go->next;
    }
    second->root = go->next;
    second->count = (first->count / 2);
    first->count = first->count - (first->count/2);
    go->next = NULL;
    return second;
}

LinkedList *getElByIndex(LinkedList *list, int index)
{
    if (index > list->count) {
        return NULL;
    }

    LinkedList *el = (LinkedList*) calloc(1, sizeof(LinkedList *));
    el->root = NULL;
    el->count= list->count - index;

    ListElement *go = list->root;
    for (int i = 0; i < index; i++) {
        go = go->next;
    }

    el->root = go;
    return el;
}

LinkedList *merge(LinkedList *a, LinkedList *b){
    ListElement *first = a->root;
    ListElement *second = b->root;
    LinkedList *rez = (LinkedList *) calloc(1, sizeof(LinkedList));
    while ((first->next != NULL) && (second->next != NULL)) {
        if (less(first, second)) {
            newElement(rez, first->data);
            first = first->next;
        } else {
            newElement(rez, second->data);
            second = second->next;
        }
    }
    return rez;
}

void listSort(LinkedList **ll, int sortedRate){
    // Возвращает показатель
    LinkedList *a = *ll;

    if (a->count == 1){
        return;
    }

    if (sortedRate != 1) {
        LinkedList* b = split(a);
        listSort(&a, 0);
        listSort(&b, 0);
        *ll = merge(a, b);
    }
}

int main(int argc, char **argv)
{
    LinkedList * ll = (LinkedList *)calloc(1, sizeof(LinkedList));
    ll->root=NULL;
    ll->count=0;
    FILE *file = fopen(argv[1], "r");
    int number;

    fscanf(file, "%d", &number);
    while(!feof(file)) {
        newElement(ll, number);
        fscanf(file, "%d", &number);
    }

    listSort(&ll, 0);
    ListElement *go = ll->root;

    while (go != NULL){
        printf("%d ", go->data);
        go = go->next;
    }

    go = ll->root;

    TreeElement *rootTREE = NULL;

    while(go != NULL) {
        rootTREE = insert(rootTREE, go->data);
        go = go->next;
    }

    printTree(rootTREE, 0);

    return 0;
}